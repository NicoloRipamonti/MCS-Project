q()
tic.tac.toe <- read.csv("C:/Users/loren/Desktop/tic-tac-toe.data")
View(tic.tac.toe)
palindrome <- function(astr) {
# house keepging removing blanks and punctuation etc through a pattern
# make all to lower case
regex <- “^[ \t]+|[ \t]+$|\\.|\\’|[ \t]+|,|!|-“
astr.clean <- gsub(regex,”,astr)
str.refined <- tolower(astr.clean)
shortstring <- palindromecal(str.refined)
return(shortstring)
}
palindrome <- function(astr) {
# house keepging removing blanks and punctuation etc through a pattern
# make all to lower case
regex <- “^[ \t]+|[ \t]+$|\\.|\\’|[ \t]+|,|!|-“
astr.clean <- gsub(regex,”,astr)
str.refined <- tolower(astr.clean)
shortstring <- palindromecal(str.refined)
return(shortstring)
}
A = readMM("../Matrici/ex15.mtx")
setwd("C:/Users/loren/Desktop/Università/Progetti/Metodi Calcolo Scientifico/Git/MCS_Project/R")
library(Matrix)
library(e1071)
A = readMM("../Matrici/ex15.mtx")
xe = rep(1, times = nrow(A))
b = A * sol
b = A * xe
C = chol(A)
C = t(C)
y = solve(C, b)
x = solve(t(C), y)
xe = rep(1, times = nrow(A))
errore = norm(x - xe) / norm(xe)
View(x)
View(C)
View(y)
View(b)
b = A %*% xe
View(b)
C = chol(A)
y = solve(C, b)
x = solve(t(C), y)
errore = norm(x - xe) / norm(xe)
View(x)
View(x)
x.x
View(x)
View(b)
b.mat = as.matrix(b)
View(b.mat)
y = solve(C, b.mat)
View(y)
errore = norm(as.matrix(x) - xe) / norm(xe)
View(x)
View(b.mat)
sum(is.na(b.mat))
View(y)
x = solve(t(C), as.matrix(y))
x = as.matrix(solve(t(C), as.matrix(y)))
View(x)
errore = norm(x - xe) / norm(xe)
errore = norm(x - xe)
errore = errore / norm(xe)
errore = errore / norm(as.matrix(xe))
errore = norm(x - xe)
errore = errore / norm(as.matrix(xe))
errore = norm(x - xe)
errore = errore / norm(as.matrix(xe))
xe = as.matrix(xe)
View(xe)
norm(xe)
x - xe
errore = norm(x - xe)
diff = x - xe
View(diff)
norm(diff)
errore = errore / norm(as.matrix(xe))
errore
format(errore, scientific = TRUE)
C = chol(A)
y = solve(t(C), b.mat)
x = as.matrix(solve(t, as.matrix(y)))
as.matrix(y)
x = solve(C, as.matrix(y))
xe = as.matrix(xe)
diff = x - xe
norm(diff)
errore = norm(x - xe)
errore = errore / norm(as.matrix(xe))
format(errore, scientific = TRUE)
